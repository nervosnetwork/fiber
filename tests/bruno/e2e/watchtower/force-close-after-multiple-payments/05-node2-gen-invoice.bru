meta {
  name: generate a invoice
  type: http
  seq: 5
}

post {
  url: {{NODE2_RPC_URL}}
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "id": "42",
    "jsonrpc": "2.0",
    "method": "new_invoice",
    "params": [
      {
        "amount": "0x5d21dba00",
        "currency": "Fibd",
        "description": "test invoice generated by node2",
        "expiry": "0xe10",
        "final_expiry_delta": "0xDFFA0",
        "payment_preimage": "{{payment_preimage}}"
      }
    ]
  }
}

assert {
  res.body.error: isUndefined
  res.body.result: isDefined
}

script:pre-request {
  // generate random preimage
  function generateRandomPreimage() {
    let hash = '0x';
    for (let i = 0; i < 64; i++) {
        hash += Math.floor(Math.random() * 16).toString(16);
    }
    return hash;
  }
  const payment_preimage = generateRandomPreimage();
  bru.setVar("payment_preimage", payment_preimage);
  let hash_algorithm = bru.getEnvVar("HASH_ALGORITHM");
  if (hash_algorithm !== null) {
    let body = req.getBody();
    body.params[0].hash_algorithm = hash_algorithm;
    req.setBody(body);
  }
}

script:post-response {
  console.log("generated result: ", res.body.result);
  bru.setVar("encoded_invoice", res.body.result.invoice_address);
  // Sleep for sometime to make sure current operation finishes before next request starts.
  await new Promise(r => setTimeout(r, 1000));
}
