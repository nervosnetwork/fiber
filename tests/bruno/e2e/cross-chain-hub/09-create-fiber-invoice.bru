meta {
  name: 09-create-fiber-invoice
  type: http
  seq: 9
}

post {
  url: {{NODE1_RPC_URL}}
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "id": "42",
    "jsonrpc": "2.0",
    "method": "new_invoice",
    "params": [
      {
        "amount": "0xc350",
        "currency": "Fibd",
        "description": "test invoice",
        "udt_type_script": {
          "args": "0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947",
          "code_hash": "0xe1e354d6d643ad42724d40967e334984534e0367405c5ae42a9d7d63d77df419",
          "hash_type": "data1"
        },
        "payment_preimage": "{{payment_preimage}}"
      }
    ]
  }
}

script:pre-request {
  // generate random preimage
  function generateRandomPreimage() {
    let hash = '0x';
    for (let i = 0; i < 64; i++) {
        hash += Math.floor(Math.random() * 16).toString(16);
    }
    return hash;
  }
  const payment_preimage = generateRandomPreimage();
  bru.setVar("payment_preimage", payment_preimage);
}

assert {
  res.status: eq 200
  res.body.error: isUndefined
  res.body.result.invoice_address: isDefined
  res.body.result.invoice.data.payment_hash: isDefined
}

script:post-response {
  bru.setVar("FIBER_PAY_REQ", res.body.result.invoice_address);
  bru.setVar("PAYMENT_HASH", res.body.result.invoice.data.payment_hash);
}

docs {
  Create a fiber invoice to receive money
}
